// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: felight_api.proto

package api

import (
	types "github.com/felightxyz/felight-sdk-go/sdk/protobuf/types"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiEthClient is the client API for ApiEth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiEthClient interface {
	// public APIs
	SubscribeNewTxs(ctx context.Context, in *types.TxsRequest, opts ...grpc.CallOption) (ApiEth_SubscribeNewTxsClient, error)
}

type apiEthClient struct {
	cc grpc.ClientConnInterface
}

func NewApiEthClient(cc grpc.ClientConnInterface) ApiEthClient {
	return &apiEthClient{cc}
}

func (c *apiEthClient) SubscribeNewTxs(ctx context.Context, in *types.TxsRequest, opts ...grpc.CallOption) (ApiEth_SubscribeNewTxsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiEth_ServiceDesc.Streams[0], "/api.ApiEth/SubscribeNewTxs", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiEthSubscribeNewTxsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiEth_SubscribeNewTxsClient interface {
	Recv() (*types.TxsResponse, error)
	grpc.ClientStream
}

type apiEthSubscribeNewTxsClient struct {
	grpc.ClientStream
}

func (x *apiEthSubscribeNewTxsClient) Recv() (*types.TxsResponse, error) {
	m := new(types.TxsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiEthServer is the server API for ApiEth service.
// All implementations must embed UnimplementedApiEthServer
// for forward compatibility
type ApiEthServer interface {
	// public APIs
	SubscribeNewTxs(*types.TxsRequest, ApiEth_SubscribeNewTxsServer) error
	mustEmbedUnimplementedApiEthServer()
}

// UnimplementedApiEthServer must be embedded to have forward compatible implementations.
type UnimplementedApiEthServer struct {
}

func (UnimplementedApiEthServer) SubscribeNewTxs(*types.TxsRequest, ApiEth_SubscribeNewTxsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNewTxs not implemented")
}
func (UnimplementedApiEthServer) mustEmbedUnimplementedApiEthServer() {}

// UnsafeApiEthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiEthServer will
// result in compilation errors.
type UnsafeApiEthServer interface {
	mustEmbedUnimplementedApiEthServer()
}

func RegisterApiEthServer(s grpc.ServiceRegistrar, srv ApiEthServer) {
	s.RegisterService(&ApiEth_ServiceDesc, srv)
}

func _ApiEth_SubscribeNewTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.TxsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiEthServer).SubscribeNewTxs(m, &apiEthSubscribeNewTxsServer{stream})
}

type ApiEth_SubscribeNewTxsServer interface {
	Send(*types.TxsResponse) error
	grpc.ServerStream
}

type apiEthSubscribeNewTxsServer struct {
	grpc.ServerStream
}

func (x *apiEthSubscribeNewTxsServer) Send(m *types.TxsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ApiEth_ServiceDesc is the grpc.ServiceDesc for ApiEth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiEth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ApiEth",
	HandlerType: (*ApiEthServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeNewTxs",
			Handler:       _ApiEth_SubscribeNewTxs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "felight_api.proto",
}
